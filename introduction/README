Javascript runtime- runs at the server side
Javascript - runs at hte browser side to manipulate the dom
Build on Javascript, add features to it.
Javascript not capable of doing things that Nodejs can do.
Javascript code run on the server.
Nodejs uses v8
V8- is Javascript engine build by google that runs Javascript in the browser/ written in c++
v8 engine takes Javascript code and compiles to machine code
working with file systems - open file / read/ write file

REPL - execute javascript code

material icon theme

node first-app.js 

fs-code module of node js to work with the file system

client (browser ) send request (http) to the server. server sends response to request
node js returns data that client can work with
we can execute any javascript codewith node js
node js can be used for local utility scripts / build tools e.g for angular/ react / vue used for many build processes
Utility scripts like writing to the files/ read from the files
create server listen to the incoming requests
we can create server on the node js.
handle requests / validate input / connect to the database
return response e.g. json / html / 
alternatives to node js python / php / asp.net / ruby on rails

REPL - 

core modules
http : work with http request response / creating server
https: secured http
fs: work with file system
path: work with local file system path relative / absolute path
os: work with os related information


STREAMS & BUFFERS
stream is ongoing process. req in node in nodejs is read by node as chunks (in parts)
we  can wrk with individual chunks without waiting for all the chunks to be loaded
for file upload it takes long time t load the data

BUFFER - is like a bus stops
we can read the bus stops 
buffer is global object of node js

LISTENING EVENTS -
 on allow to listen to the EVENTS
 eg. data even

HOW NODEJS WORKS BEHIND SCENE WITH EVENTS
nodejs has internal event registry where all events registered
it never pause the code execution 
functions are just registered internally to it's registry and make available later
long time taking code runs sometime in feature 

SYNC / ASYNC OPERATIONS
e.g. witeFileSync - blocks the code execution until the current operation done
writeFile - it does not blocks the current code execution

SINGLE THREAD EVENT LOOP & BLOCKING CODE 
thread is just like process in os
node is not able to assing new thread to each request instead it works on single thread
working with files takes a longer time

EVENT LOOP- 
is automatically started by node js, when program starts
is responsible for handling event callbacks
long time taking operations not handled by event loop just callbacks are handled by EVENT LOOP
callbacks handled by EVENT LOOP that contain fast executing callbacks 
first it checks for timers e.g. execute setTimeout(), setInterval() methods.
second it checks for other callbacks e.g. execute i/o related operations
third is POLL retrive new i/o events handle their callbacks
then it execute all close event callbacks

process.exit();
if no more event handlers 

WORKER POOL
Long time taking operations are send to WORKER POOL which is managed by nodejs automatically
heavy lifting is done by WORKER POOL
it runs on different / multiple threads
once it done the heavy lifting operations it triggers a callback for that operation
and then it send back to EVENT LOOP for handling the callbacks